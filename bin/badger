#!/usr/bin/env python3
import argparse
import getpass
import hashlib
import hmac
import os
import pathlib
import subprocess
import sys


badgeshadow_file_path = pathlib.Path(os.getenv('HOME')) / '.badgeshadow'


class Message:
    """Superclass for all authproto packet types."""
    def __init__(self, data):
        self.data = data

    def write(self, f):
        f.write(self.__class__.packet_letter)
        f.write(b' ')
        f.write(str(len(self.data)).encode('ascii'))
        f.write(b'\n')
        f.write(self.data)
        f.write(b'\n')
        f.flush()


messages = {letter: type(klass, (Message, ),
                         dict(packet_letter=letter, **Message.__dict__))
            for letter, klass in ((b'i', 'InfoMessage'),
                                  (b'e', 'ErrorMessage'),
                                  (b'U', 'UsernamePrompt'),
                                  (b'P', 'PasswordPrompt'),
                                  (b'u', 'UsernameResponse'),
                                  (b'p', 'PasswordResponse'),
                                  (b'x', 'ExitMessage'))}
m = {klass.__name__: klass for klass in messages.values()}


def read_message(f):
    letter, _, length = f.readline().partition(b' ')
    length = int(length)
    data = f.read(length)
    newline = f.read(1)
    if newline != b'\n':
        raise ValueError('Expected newline, got {!r}'.format(newline))
    return messages[letter](data)


def read_badgeshadow():
    with open(badgeshadow_file_path, 'rb') as f:
        if f.read(2) != b'V0':
            return None
        salt = f.read(hashlib.blake2b.SALT_SIZE)
        digest = f.read()
    return salt, digest


def write_badgeshadow(badge_id):
    if isinstance(badge_id, str):
        badge_id = badge_id.encode('utf-8')
    salt = os.urandom(hashlib.blake2b.SALT_SIZE)
    h = hashlib.blake2b(salt=salt)
    h.update(badge_id)
    with open(badgeshadow_file_path, 'wb') as f:
        f.write(b'V0')
        f.write(salt)
        f.write(h.digest())


def run_authproto():
    # First check that the badgeshadow exists
    try:
        salt, digest = read_badgeshadow()
    except FileNotFoundError:
        os.execl('./authproto_pam', './authproto_pam')


    pam_proc = None
    while True:
        m['PasswordPrompt'](b'Password or badge: ').write(sys.stdout.buffer)
        msg = read_message(sys.stdin.buffer)
        if isinstance(msg, m['ExitMessage']):
            return False
        elif isinstance(msg, m['PasswordResponse']):
            pw = msg.data
            h = hashlib.blake2b(salt=salt)
            h.update(pw)
            if hmac.compare_digest(h.digest(), digest):
                m['InfoMessage'](b'Authenticated via badge!').write(
                    sys.stdout.buffer)
                if pam_proc and pam_proc.poll() is None:
                    m['ExitMessage'](b'').write(pam_proc.stdin)
                    pam_proc.wait(1)
                return True
            if not pam_proc:
                pam_proc = subprocess.Popen(['./authproto_pam'],
                                            stdin=subprocess.PIPE,
                                            stdout=subprocess.PIPE)
            while True:
                pam_proc.poll()
                if pam_proc.returncode is not None:
                    return not pam_proc.returncode
                pam_asks = read_message(pam_proc.stdout)
                if isinstance(pam_asks, m['PasswordPrompt']):
                    msg.write(pam_proc.stdin)
                    try:
                        pam_proc.wait(1)
                    except subprocess.TimeoutExpired:
                        break
                    return not pam_proc.returncode
                pam_asks.write(sys.stdout.buffer)
                if isinstance(pam_asks, m['UsernamePrompt']):
                    while True:
                        response = read_message(sys.stdin.buffer)
                        response.write(pam_proc.stdin)
                        if isinstance(response, m['UsernameResponse']):
                            break
                        elif isinstance(response, m['ExitMessage']):
                            pam_proc.wait(1)
                            return False
        else:
            raise ValueError("Unexpected message")


def run_setup():
    badge_id = getpass.getpass("Swipe your badge...")
    write_badgeshadow(badge_id)


def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()
    subparsers.required = True

    authproto_parser = subparsers.add_parser('authproto')
    authproto_parser.set_defaults(func=run_authproto)

    setup_parser = subparsers.add_parser('setup')
    setup_parser.set_defaults(func=run_setup)

    args = parser.parse_args()
    args.func()


if __name__ == '__main__':
    main()
