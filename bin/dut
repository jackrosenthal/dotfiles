#!/bin/sh
# Copyright 2020 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

set -e

DUT_SSH_OPTS=(
    '-i'
    "${HOME}/.ssh/testing_rsa"
    '-oUserKnownHostsFile=/dev/null'
    '-oStrictHostKeyChecking=no'
    '-oCheckHostIP=no'
    '-oConnectTimeout=10'
    '-oControlMaster=auto'
    '-oControlPath=${HOME}/duts/%r@%h:%p.socket'
    '-oControlPersist=1h'
)

main() {
    local dutname="${DUT}"

    while [ "${1:0:1}" == - ]; do
        case "$1" in
            -n | --name )
                shift
                dutname="$1"
                ;;
            * )
                echo "Unknown argument: $1" >&2
                exit 1
                ;;
        esac
        shift
    done

    if [ -z "${dutname}" ]; then
        dutname=default
    fi

    export DUTFILE="${HOME}/duts/${dutname}.dut"
    if [ -e "${DUTFILE}" ]; then
        source "${DUTFILE}"
    fi

    local cmd="${1}"
    if [ -z "${cmd}" ]; then
        cmd=help
    fi
    shift 2>/dev/null || true
    "_dut_${cmd}" "$@"
}

_duthelp_help() {
    echo "Show a help message and exit."
    echo "Usage: dut help [SUBCOMMAND]"
}

_dut_help() {
    if [ -n "${1}" ]; then
        "_duthelp_${1}"
        return 0
    fi
    echo "usage: dut [GLOBAL OPTIONS...] SUBCOMMAND [SUBCOMMAND ARGS...]"
    echo
    echo "Global options:"
    echo "  -n NAME | --name NAME    Register multiple duts by giving them"
    echo "                           unique identifiers.  This will also be set"
    echo "                           by the DUT environment variable."
    echo
    echo "Subcommands:"

    local cmd
    for cmd in $(typeset -f | \
                     sed -ne 's/^.*_dut_\([A-Za-z0-9_-]\+\)\s*(.*$/  \1/p'); do
        printf '  %-12s %s\n' "${cmd}" "$("_duthelp_${cmd}" | head -1)"
    done

    echo
    echo 'Run "dut help SUBCOMMAND" for further help on a specific command.'
}

_duthelp_setup() {
    echo "Setup a new dut in the registry."
    echo "Usage: dut setup [ADDRESS[:PORT]] [SERVO OPTIONS...]"
    echo
    echo "ADDRESS[:PORT] should be the address used for SSH into the DUT, and"
    echo "may optionally be omitted if servo-only usage is desired."
    echo
    echo "Servo options: (may be omitted if SSH-only usage is desired)"
    echo "  -s [HOST][:PORT]     Connect to servod at this address."
    echo "  -b BOARD             Start servod for this board."
}

_dut_setup() {
    DUTIP="$1"
    mkdir -p "$(dirname -- "${DUTFILE}")"
    :> "$DUTFILE"
    echo "DUTIP=${DUTIP}" >>"${DUTFILE}"
    _dut_ssh /bin/true
}

_duthelp_ssh() {
    echo "SSH into the DUT."
    echo "Usage: dut ssh [CMD...]"
}

_dut_ssh() {
    local term="${TERM}"
    if [ -z "${term}" ] || [ "${term:0:4}" == "rxvt" ]; then
        term=xterm
    fi
    TERM="${term}" ssh "${DUT_SSH_OPTS[@]}" "root@${DUTIP}" "$@"
}

_duthelp_put() {
    echo "Copy a file to the DUT."
    echo "Usage: dut put FILE [DEST]."
    echo
    echo "If DEST is not specified, the dut's PATH environment variable will be"
    echo "searched for a file of the same name, and copied there.  If none"
    echo "exists, it wil go into /tmp."
}

_dut_put() {
    local localfile="$1"
    shift
    local remotefile="$1"
    if [ -z "${remotefile}" ]; then
        remotefile="$(_dut_ssh which "$(basename -- "${localfile}")" || echo /tmp)"
    fi
    scp "${DUT_SSH_OPTS[@]}" "${localfile}" "root@${DUTIP}:${remotefile}"
}

_duthelp_reboot() {
    echo "Reboot the dut."
    echo "Usage: dut reboot"
}

_dut_reboot() {
    _dut_ssh exec reboot
}

_duthelp_info() {
    echo "Print some useful info about the machine."
}

_dut_info() {
    local infocmds=(
        'build' 'cat /etc/lsb-release | sed -ne "s/^CHROMEOS_RELEASE_BUILDER_PATH=\(.*\)$/\1/p"'
        'model' 'cros_config / name'
        'hwid' 'crossystem hwid'
        'ro_fwid' 'crossystem ro_fwid'
        'fwid' 'crossystem fwid'
        'kernel_release' 'uname -r'
        'flash_chip' 'flashrom | sed -ne '"'"'s/^Found \(.*\) flash chip "\(.*\)" \((.*)\).*$/\1 \2 \3/p'"'"
        'flash_wp' 'flashrom --wp-status | sed -ne "s/^WP: write protect is \([a-z]*\).*$/\1/p"'
        'on_ac' '( [ "$(cros_config /hardware-properties psu-type)" == AC_only ] || ( ectool chargestate show | grep "ac = 1" >/dev/null ) ) && echo true || echo false'
        'battery_percent' 'ectool chargestate show | sed -ne "s/^batt_state_of_charge = \([0-9]\+%\)$/\1/p"'
    )

    local i=0
    local val rv
    while [ "${i}" -lt "${#infocmds[@]}" ]; do
        val="$(_dut_ssh "${infocmds[$((i + 1))]}" 2>/dev/null)"
        rv="$?"
        if [ -z "${val}" ]; then
            if [ "${rv}" -eq 0 ]; then
                val='<unknown>'
            else
                val='<error>'
            fi
        fi
        printf "  %-25s %s\n" "${infocmds[${i}]}" "${val}"
        i=$((i + 2))
    done
}

main "$@"
