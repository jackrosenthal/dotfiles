#!/usr/bin/env python3
# Copyright 2019 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import io
import os
import pathlib
import re
import sched
import site
import subprocess
import tempfile
import textwrap
import time

site.addsitedir(pathlib.Path(os.getenv('HOME')) / 'chromiumos')

import chromite.lib.gob_util as gob_util
from chromite.lib.patch import PatchQuery, GerritPatch
from chromite.lib.gerrit import GerritHelper

scheduler = sched.scheduler(time.time, time.sleep)


class GerritInstance(GerritHelper):
  def Query(self, *args, **kwargs):
    results = super().Query(*args, bypass_cache=False, **kwargs)
    for r in results:
      r.instance = self
    return results


instances = {
    'chromium': GerritInstance.FromGob('chromium'),
    'chrome-internal': GerritInstance.FromGob('chrome-internal'),
}
_instances = {i.remote: i for i in instances.values()}


def instance_from_remote(remote):
  if remote not in _instances.keys():
    _instances[remote] = GerritInstance.FromRemote(remote)
  return _instances[remote]


class PatchError(Exception):
  pass


mark_ready_banned = set()


def ban_mark_ready(patch, seconds):
  mark_ready_banned.add(patch.url)

  def make_available():
    print(patch.url, "is available to be marked CQ+2 again!")
    mark_ready_banned.remove(patch.url)

  scheduler.enter(seconds, 0, make_available)

def patch_mark_ready_error(patch):
  if patch.IsDraft():
    return 'is a draft.'
  if patch.IsPrivate():
    return 'is private.'
  if patch.status == 'ABANDONED':
    return 'was abandoned.'
  if patch.HasApproval('VRIF', '-1'):
    return 'is marked Verified=-1.'
  if patch.HasApproval('CRVW', '-2'):
    return 'is marked Code-Review=-2.'
  if not patch.HasApproval('CRVW', '2'):
    return 'is not marked Code-Review=+2.'
  if not patch.HasApproval('VRIF', '1'):
    return 'is not marked Verified=+1.'
  if not patch.HasApproval('COMR', '2') and patch.url in mark_ready_banned:
    return 'was marked ready too recently and is not currently CQ+2'
  return None


def mark_ready(patch):
  err = patch_mark_ready_error(patch)
  if err:
    raise PatchError('{} {}'.format(patch.url, err))
  if patch.status != 'NEW':
    raise PatchError('{} is already submitted or merged.'.format(patch.url))
  if patch.HasApproval('COMR', '2'):
    print('{} is already marked CQ+2.'.format(patch.url))
    return
  print('Marking {} CQ+2...'.format(patch.url))
  patch.instance.SetReview(patch, labels={'Commit-Queue': '+2'}, notify='OWNER')
  ban_mark_ready(patch, 60 * 30)


def _needed_deps(patch, visited):
  if not isinstance(patch, GerritPatch):
    instance = instance_from_remote(patch.remote)
    for patch in instance.Query(patch.ToGerritQueryText()):
      yield from _needed_deps(patch, visited)
    return
  if patch.status in ('MERGED', 'SUBMITTED'):
    return
  if patch.url in visited:
    return
  err = patch_mark_ready_error(patch)
  if err:
    raise PatchError('{} {}'.format(patch.url, err))
  visited.add(patch.url)
  yield patch
  for child in patch.GerritDependencies():
    yield from _needed_deps(child, visited)
  for child in patch.PaladinDependencies(None):
    yield from _needed_deps(child, visited)


def needed_deps(patch):
  visited = set()
  yield from _needed_deps(patch, visited)


def query_and_mark_ready(instance, qs):
  cls = list(instance.Query(qs))
  if cls:
    print(' {} CLs to process'.format(len(cls)))
  else:
    print(' nothing to do!')
  for cl in cls:
    try:
      deps = list(needed_deps(cl))
    except PatchError as e:
      print('Either {} or its dependencies are not ready yet. '
            '({})'.format(cl.url, e))
    else:
      for dep in deps:
        mark_ready(dep)


def sticky_cq_task():
  for name, instance in instances.items():
    print("Querying {}...".format(name), end='')
    query_and_mark_ready(instance, 'hashtag:stickycq status:open')
  scheduler.enter(90, 10, sticky_cq_task)


auto_cc_searches = [
    'mosys after:2020-03-09',
    'CrosConfig after:2020-03-09',
]


def auto_cc_task():
  base_query = ('-status:abandoned -owner:jrosenth -author:jrosenth '
                '-owner:chromeos-ci-prod -reviewer:jrosenth -cc:jrosenth '
                '-star:ignore')
  for name, instance in instances.items():
    for search in auto_cc_searches:
      search_query = '{} {}'.format(search, base_query)
      print("Querying AutoCC for '{}' on {}...".format(name, search_query))
      cls = list(instance.Query(search_query))
      for cl in cls:
        print("AutoCC added to {}:{}!".format(name, cl))
        cl.instance.SetReview(cl, msg="Automated CC", notify='NONE')
  scheduler.enter(120, 15, auto_cc_task)


zephyr_upstream_repos = [
    ('chromiumos/third_party/zephyr',
     'https://github.com/zephyrproject-rtos/zephyr'),
    ('chromiumos/third_party/zephyr/cmsis',
     'https://github.com/zephyrproject-rtos/cmsis'),
    ('chromiumos/third_party/zephyr/hal_stm32',
     'https://github.com/zephyrproject-rtos/hal_stm32'),
]

# TODO: change to -2 when this bot gets a track record
REVIEW_STRICTLY_DO_NOT_SUBMIT = '-1'
REVIEW_PREFER_NOT_SUBMITTED = '-1'
REVIEW_NEEDS_HUMAN_APPROVAL = '+1'
REVIEW_AUTOMATIC_APPROVAL = '+2'


def zephyr_upstream_task():
  instance = instances['chromium']

  for project, upstream in zephyr_upstream_repos:
    search_query = 'project:{} status:open'.format(project)
    cls = list(instance.Query(search_query))
    print('zephyr_upstream_task: {} CLs to filter from {}'.format(
        len(cls), project))
    for cl in cls:
      ps_number = cl.patch_dict['currentPatchSet']['number']
      proc_hashtag = 'zephyr_upstream_bot_checked_ps{}'.format(ps_number)

      proc_query = '{} {} -hashtag:{}'.format(
          search_query, cl.ToGerritQueryText(), proc_hashtag)

      for cl_needs_proc in instance.Query(proc_query):
        def setlabels(labels, msg=None):
          print('Setting {!r} on {}...'.format(labels, cl_needs_proc.url))
          cl_needs_proc.instance.SetReview(cl_needs_proc, msg=msg,
                                           labels=labels)

        # Reset Code-Review until we decide the new review.
        # OK if Gerrit quirks out or something.
        try:
          setlabels({'Code-Review': '0'})
        except gob_util.GOBError:
          pass

        cr, message = zephyr_get_review(cl_needs_proc, upstream)

        message += ('\n\nThis is an automated message from a bot trying to be '
                    "helpful.  If I'm mis-behaving, or if this message seems "
                    'to be wrong, please feel free to reach out to my owner, '
                    'jrosenth@chromium.org.')

        labels = {'Code-Review': str(cr)}
        setlabels(labels, msg=message)
        cl_needs_proc.instance.SetHashtags(cl_needs_proc,
                                           add=[proc_hashtag],
                                           remove=[])

  scheduler.enter(200, 20, zephyr_upstream_task)


def get_upstream_commit_hash(commit_message):
  p = re.compile(r'commit\s*([0-9a-f]{8,})', re.MULTILINE)
  m = p.search(commit_message)
  if m:
    return m.group(1)
  raise ValueError(
      'Your commit message must include at least 8 nibbles of the '
      'commit hash this was cherry-picked from.  For example:\n\n'
      '    (cherry picked from commit abcdef0123)\n\n')


def check_upstream_commit(cl, upstream_url, changes_expected=False):
  try:
    commit_hash = get_upstream_commit_hash(cl.commit_message)
  except ValueError as e:
    return -2, str(e)

  with tempfile.TemporaryDirectory() as checkout_path:
    subprocess.run(['git', 'clone', upstream_url, checkout_path], check=True)

    def run_git(args, **kwargs):
      kwargs.setdefault('check', True)
      kwargs.setdefault('encoding', 'utf-8')
      kwargs.setdefault('errors', 'replace')
      return subprocess.run(['git', '-C', checkout_path, '--no-pager', *args],
                            **kwargs)

    # Check the commit hash is valid
    try:
      result = run_git(['log', '-n1', '--format=%H', commit_hash],
                       stdout=subprocess.PIPE)
      commit_hash = result.stdout.strip()
    except subprocess.CalledProcessError:
      return -2, ('The commit hash {!r} does not appear to be present in the '
                  'upstream repository ({}).  Please double-check it.'.format(
                      commit_hash, upstream_url))

    # Fetch the CL from Gerrit
    run_git(['fetch', cl.project_url, cl.ref])

    def single_cl_range(ref):
      return '{0}~..{0}'.format(ref)

    range_diff = run_git(['range-diff', '--no-color',
                          single_cl_range(commit_hash),
                          single_cl_range('FETCH_HEAD')],
                         stdout=subprocess.PIPE)
    print(range_diff.stdout)
    changes = set()
    p = re.compile(r'^    @@ (.+)\n$')
    for line in io.StringIO(range_diff.stdout):
      m = p.fullmatch(line)
      if m:
        text = m.group(1)
        if text.lower().strip() not in ('commit message', 'metadata'):
          changes.add(text)

    changed_files_list = ''.join('* {}\n'.format(fname) for fname in changes)

    message = ''
    review = REVIEW_STRICTLY_DO_NOT_SUBMIT
    if changes_expected and changes:
      review = REVIEW_NEEDS_HUMAN_APPROVAL
      message += ("This is a BACKPORT commit, and I've identified that there "
                  'were changes from the upstream commit in these files:\n\n')
      message += changed_files_list
      message += ('\nReviewers: please identify that the changes made are '
                  'acceptable, and approve as appropriate.\n\n')
    elif changes_expected and not changes:
      message += ('This commit was labeled as BACKPORT, but there were no '
                  'changes found to the upstream commit.  You probably meant '
                  'to tag it as UPSTREAM instead.\n\n')
    elif changes:
      message += ('This commit was labeled as UPSTREAM, but I found changes '
                  'made in these files from the upstream commit:\n\n')
      message += changed_files_list
      message += '\nPerhaps you meant to label as BACKPORT?\n\n'
    else:
      review = REVIEW_AUTOMATIC_APPROVAL
      message += ('No changes found to upstream commit!  Automatic approval '
                  'has been granted.\n\n')

    message += 'For your convenience, the upstream commit can be found here: '
    message += '{}/commit/{}'.format(upstream_url, commit_hash)

    return review, message


def check_backport_commit(cl, upstream_url):
  return check_upstream_commit(cl, upstream_url, changes_expected=True)


def check_frompull_commit(cl, upstream_url):
  p = re.compile(re.escape('{}/pull/'.format(upstream_url)) + r'[0-9]+')
  m = p.search(cl.commit_message)
  if not m:
    return (REVIEW_STRICTLY_DO_NOT_SUBMIT,
            'Please add a link to the pull request in the commit message.')
  return (REVIEW_NEEDS_HUMAN_APPROVAL,
          'Reviewers: please identify if this FROMPULL commit is acceptable '
          'to merge to our Chromium OS branches.')


def check_chromium_commit(cl, upstream_url):
  return (REVIEW_PREFER_NOT_SUBMITTED,
          'The CHROMIUM tag is used for commits in this repository which '
          'cannot be upstreamed.\n'
          '\n'
          'Generally speaking, almost all commits can either be '
          'upstreamed, or instead landed in one of our local '
          'repositories, such as platform/ec.\n'
          '\n'
          "* If it's possible to upstream this CL, please do so.  You "
          'can reupload this CL with the FROMPULL tag instead after '
          'uploading the pull request.\n'
          '\n'
          "* Otherwise, if it's possible to land this code in "
          'platform/ec or another local repository instead, please do '
          'that, and abandon this CL.\n'
          '\n'
          'If none of the above are possible, you may remove my CR-1 on '
          'this CL and proceed with the review.\n'
          '\n'
          'Thanks for helping us keep upstream first!\n')


zephyr_tags = [
    ('UPSTREAM', check_upstream_commit,
     'This tag should be used for commits which have already merged into '
     'upstream Zephyr, and no modifications are required to cherry-pick it '
     'to this branch.'),
    ('BACKPORT', check_backport_commit,
     'This tag should be used for commits which have already merged into '
     'upstream Zephyr, and modifications were required to cherry-pick it to '
     'this branch.  Please help out by providing a brief summary of the '
     'modifications you made in the commit message.'),
    ('FROMPULL', check_frompull_commit,
     'This tag should be used for commits which have not yet been merged '
     'into upstream Zepyhr, but have a pending pull request open.  Please '
     'link to the pull request in the commit message.'),
    ('CHROMIUM', check_chromium_commit,
     'This tag should be used for commits which will never be upstreamed. '
     'Generally speaking, these commits can almost always be avoided by '
     'landing code in one of the repositories we maintain (i.e., platform/ec), '
     "and should only be used as a last resort if it's impossible to put it in "
     "one of our modules, and upstream won't accept our change.  Please "
     'include adequate justification as to why this commit cannot be '
     'upstreamed in your commit message.'),
]


def zephyr_get_review(cl, upstream_url):
  for tag, review_func, helpmsg in zephyr_tags:
    if cl.commit_message.startswith('{}: '.format(tag)):
      return review_func(cl, upstream_url)

  # No tag matched
  msg = """Your commit message subject line in this repository MUST include one
of the following tags to help us track upstream changes:

"""
  for tag, review_func, helpmsg in zephyr_tags:
    msg += '* {}: {}\n\n'.format(tag, helpmsg)

  return REVIEW_STRICTLY_DO_NOT_SUBMIT, msg


def main():
  scheduler.enter(0, 10, sticky_cq_task)
  scheduler.enter(5, 15, auto_cc_task)
  scheduler.enter(10, 20, zephyr_upstream_task)
  scheduler.run()


if __name__ == '__main__':
  main()
