#!/usr/bin/env python3

import dataclasses
import enum
import os
import pathlib
import re
import subprocess
import tempfile
import typing


@dataclasses.dataclass
class Output:
    name: str
    connected: bool
    resolution: typing.Optional[typing.Tuple[int, int]] = None
    physical_size: typing.Optional[typing.Tuple[int, int]] = None

    @property
    def internal(self):
        return self.name.startswith("eDP")

    @property
    def physical_size_in(self):
        if not self.physical_size:
            return None
        return (self.physical_size[0] / 25.4, self.physical_size[1] / 25.4)

    @property
    def dpi(self):
        if self.resolution and self.physical_size:
            x_res = self.resolution[0] / self.physical_size_in[0]
            y_res = self.resolution[1] / self.physical_size_in[1]
            return (x_res + y_res) / 2
        return 96

    @property
    def scaling_factor(self):
        if not self.physical_size_in:
            return 1.0

        phys_area = self.physical_size_in[0] * self.physical_size_in[1]
        for cutoff, factor in (
            (14 * 9, 0.75),
            (21 * 12, 0.8),
            (23.5 * 13.5, 0.85),
            (29 * 17, 0.9),
        ):
            if phys_area <= cutoff:
                return factor
        return 1.0

    @property
    def adjusted_dpi(self):
        return max(96, self.dpi * self.scaling_factor)

    def __hash__(self):
        return hash(self.name)


def get_x_display():
    display = os.environ.get("DISPLAY")
    if display:
        return display
    for socket in pathlib.Path("/tmp/.X11-unix").glob("X*"):
        return socket.name[1:]
    raise OSError("Cannot find X display")


def run_xrandr(*args, **kwargs):
    kwargs.setdefault("check", True)
    kwargs.setdefault("stdin", subprocess.DEVNULL)
    kwargs.setdefault("stdout", subprocess.PIPE)
    kwargs.setdefault("encoding", "utf-8")
    kwargs.setdefault("errors", "replace")

    return subprocess.run(["xrandr", "-d", get_x_display(), *map(str, args)], **kwargs)


def get_outputs():
    outputs = []
    run_xrandr("--auto")
    xrandr_result = run_xrandr()
    res_p = re.compile(r"(\d+)x(\d+)")
    phys_p = re.compile(r"(\d+)mm x (\d+)mm")
    for line in xrandr_result.stdout.splitlines():
        parts = line.split()
        if len(parts) >= 2:
            if parts[1] == "connected":
                connected = True
            elif parts[1] == "disconnected":
                connected = False
            elif outputs and not outputs[-1].resolution:
                m = res_p.fullmatch(parts[0])
                if m:
                    outputs[-1].resolution = (int(m.group(1)), int(m.group(2)))
                continue
            else:
                continue
            physical_size = None
            m = phys_p.search(line)
            if m:
                physical_size = (int(m.group(1)), int(m.group(2)))
            outputs.append(
                Output(name=parts[0], connected=connected, physical_size=physical_size)
            )
    return outputs


def xrdb_merge(settings):
    with tempfile.NamedTemporaryFile(mode="w+") as f:
        for k, v in settings.items():
            f.write(f"{k}: {v}\n")
        f.flush()
        subprocess.run(
            ["xrdb", "-display", get_x_display(), "-merge", f.name],
            check=True,
        )


class LidState(enum.Enum):
    UNKNOWN = 0
    CLOSED = 1
    OPEN = 2


def get_lid_state():
    def get_possible_states():
        switches_dir = pathlib.Path("/proc/acpi/button/lid")
        if not switches_dir.is_dir():
            return
        for switch in switches_dir.iterdir():
            state_file = switch / "state"
            if state_file.is_file():
                contents = state_file.read_text()
                if "open" in contents:
                    yield LidState.OPEN
                elif "closed" in contents:
                    yield LidState.CLOSED

    states = set(get_possible_states())
    if not states:
        return LidState.UNKNOWN
    if len(states) == 1:
        return states.pop()
    raise RuntimeError(f"Lid is in multiple states: {states}")


def show_outputs(outputs):
    for output in outputs:
        print(output.name)
        for prop in (
            "connected",
            "resolution",
            "physical_size",
            "physical_size_in",
            "internal",
            "dpi",
            "scaling_factor",
            "adjusted_dpi",
        ):
            print(f"    {prop} = {getattr(output, prop)}")


def main():
    outputs = get_outputs()
    show_outputs(outputs)
    internal_displays = {d for d in outputs if d.internal and d.connected}
    external_displays = {d for d in outputs if not d.internal and d.connected}
    disconnected_outputs = {d for d in outputs if not d.connected}
    lid_state = get_lid_state()
    print(f"Lid State: {lid_state}")

    if lid_state == LidState.CLOSED and external_displays:
        enable_outputs = external_displays
        disable_outputs = internal_displays
    elif external_displays:
        enable_outputs = internal_displays | external_displays
        disable_outputs = set()
    else:
        enable_outputs = internal_displays
        disable_outputs = external_displays

    disable_outputs |= disconnected_outputs

    max_dpi_output = max(enable_outputs, key=lambda output: output.dpi)
    target_dpi = int(max_dpi_output.adjusted_dpi)
    print(f"target_dpi={target_dpi}")

    xrandr_opts = []

    for output in enable_outputs:
        xrandr_opts.extend(["--output", output.name, "--auto"])

    for output in disable_outputs:
        xrandr_opts.extend(["--output", output.name, "--off"])

    if xrandr_opts:
        run_xrandr(*xrandr_opts)

    run_xrandr("--dpi", target_dpi)

    cursor_size = 24 if target_dpi < 120 else 48
    xrdb_merge(
        {
            "Xft.dpi": target_dpi,
            "Xcursor.size": cursor_size,
        }
    )

    subprocess.run(["i3-msg", "restart"], check=True)


if __name__ == "__main__":
    main()
